<?xml version="1.0"?>
<project name="algid-tagger" default="minify" basedir=".">
	<!-- Include the property files -->
	<property file="${basedir}/dist/settings/user.properties"/>
	<property file="${basedir}/dist/settings/project.properties"/>
	
	<target name="minify" depends="prepare" description="Minify the CSS and JS files">
		<echo message="Starting: CSS and JS minification"/>
		
		<!-- Use the jar to minify the css and js files -->
		<apply executable="java" parallel="false" dest="${basedir}/${project.key}">
			<fileset dir="${basedir}/${project.key}" includes="**/*.js" excludes="**/*-min.js" />
			<arg line="-jar"/>
			<arg path="${build.lib}/yuicompressor-2.4.2/yuicompressor.jar" />
			<arg line="-v"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.js" to="*-min.js"/>
			<targetfile/>
		</apply>
		
		<apply executable="java" parallel="false" dest="${basedir}/${project.key}">
			<fileset dir="${basedir}/${project.key}" includes="**/*.css" excludes="**/*-min.css" />
			<arg line="-jar"/>
			<arg path="${basedir}/${build.lib}/yuicompressor-2.4.2/yuicompressor.jar" />
			<arg line="-v"/>
			<srcfile/>
			<arg line="-o"/>
			<mapper type="glob" from="*.css" to="*-min.css"/>
			<targetfile/>
		</apply>
		
		<echo message="Finished: CSS and JS minification"/>
	</target>
	
	<target name="prepare">
		<echo message="Starting: Environment Preparation"/>
		
		<!-- Define log file -->
		<record name="${build.logs.ant}"/>
		
		<!-- Create the time stamp -->
		<tstamp>
			<format property="build.date" pattern="MM/dd/yy hh:mmaa"/>
		</tstamp>
		
		<echo message="Finished: Environment Preparation"/>
	</target>
	
	<target name="prepareSVN" depends="prepare">
		<echo message="Starting: SVN Preparation"/>
		
		<path id="svn.classpath">
			<pathelement location="${build.lib}/svnant-1.3.0/svnant.jar" />
			<pathelement location="${build.lib}/svnant-1.3.0/svnClientAdapter.jar"/>
			<pathelement location="${build.lib}/svnant-1.3.0/svnjavahl.jar"/>
			<pathelement location="${build.lib}/svnant-1.3.0/svnkit.jar"/>
			<pathelement location="${build.lib}/svnant-1.3.0/ganymed.jar"/>
		</path>
		
		<!-- Load ANT tasks -->
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svn.classpath"/>
		
		<!-- Create the time stamp -->
		<tstamp>
			<format property="svn.log.startDate" pattern="yyyy-MM-dd" offset="-5" unit="year" />
			<format property="svn.log.endDate" pattern="yyyy-MM-dd" offset="1" unit="day"/>
		</tstamp>
		
		<!-- Get the SVN information -->
		<input addproperty="svn.username" message="SVN Username" />
		<input addproperty="svn.password" message="SVN Password" />
		
		<echo message="Finished: SVN Preparation"/>
	</target>
	
	<target name="release" depends="prepareSVN,minify,testVarScoper,testMXUnit" description="Tags a release and uploads a new version of the setup zip">
		<echo message="Starting: Release of version ${project.version}"/>
		
		<!-- Load ANT tasks -->
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="${build.lib}/ant-googlecode-0.0.2/ant-googlecode.jar" name="gcupload"/>
		
		<!-- Export the files to a temporary location -->
		<svn username="${svn.username}" password="${svn.password}" javahl="${svn.javahl}" svnkit="${svn.svnkit}">
			<export srcPath="${basedir}/${project.key}" destpath="${build.export}/${project.key}" />
		</svn>
		
		<!-- Create a zip of the temporary files -->
		<zip destfile="${build.files.source}" basedir="${build.export}/${project.key}" update="true" />
		
		<!-- Remove the temporary location -->
		<delete dir="${build.export}/${project.key}" />
		
		<!-- Upload the source files -->
		<gcupload
			username="${svn.username}"
			password="${svn.password}"
			projectname="${project.name}"
			filename="${build.files.source}"
			targetfilename="${project.key}-${project.version}.zip"
			summary="${project.fullname} - version ${project.version}"
			labels="Featured, Type-Source, OpSys-All" />
		
		<!-- Remove the zip of the temporary files -->
		<delete file="${build.files.source}" />
		
		<!-- Update the release note page from the release notes -->
		<loadfile srcfile="${build.files.releaseNotes}" property="build.releaseNotes" failonerror="true" />
		
		<!-- Place the release notes into the main release note page -->
		<replace file="${build.wiki.releaseNotes}" token="::latest::" value="::latest::${line.separator}${line.separator}== v${project.version} ==${line.separator}${line.separator}Released: ${build.date} UTC${line.separator}${line.separator}${build.releaseNotes}" />
		
		<!-- Create a new tag from the trunk -->
		<svn username="${svn.username}" password="${svn.password}" javahl="${svn.javahl}" svnkit="${svn.svnkit}">
			<copy srcPath="${basedir}" destURL="${svn.privurl}/tags/${project.version}" message="Tagging release version: ${project.version}" />
		</svn>
		
		<!-- Update the version tracking number -->
		<echo append="false" file="${build.files.version}" message="${project.version}" />
		
		<!-- Reset the release notes for the next version -->
		<echo append="false" file="${build.files.releaseNotes}" message="" />
		
		<echo message="Finished: Release of version ${project.version} complete"/>
		<echo message="Remember to increment the version for next release, run the template target, and commit changes to the trunk and wiki"/>
	</target>
	
	<target name="statSVN" depends="svnLog" description="Generates statistics from the repository">
		<echo message="Starting: SVN Statistics"/>
		
		<java jar="${build.lib}/statSVN-0.5.0/statsvn.jar" fork="true" failonerror="true">
			<arg value="-title" />
			<arg value="${project.fullname}" />
			<arg value="-include" />
			<arg value="**/*.cfc;**/*.cfm;**/*.js;**/*.css;**/*.xml;**/*.properties" />
			<arg value="-output-dir" />
			<arg value="${build.dist}/stats" />
			<arg value="-username" />
			<arg value="${svn.username}" />
			<arg value="-password" />
			<arg value="${svn.password}" />
			<arg value="-disable-twitter-button" />
			<arg value="-config-file" />
			<arg value="${build.dist}/settings/statSVN.properties" />
			<arg value="${build.logs.svn}" />
			<arg value="${basedir}" />
		</java>
		
		<echo message="Finished: SVN Statistics at ${build.dist}/stats"/>
	</target>
	
	<target name="svnCommit" depends="prepareSVN,minify,testVarScoper,testMXUnit" description="Commits the code to the repository">
		<echo message="Starting: SVN Commit"/>
		
		<input addproperty="svn.message" message="Commit Message" />
		
		<svn username="${svn.username}" password="${svn.password}" javahl="${svn.javahl}" svnkit="${svn.svnkit}">
			<commit dir="${basedir}" recurse="true" message="${svn.message}"/>
		</svn>
		
		<echo message="Finished: SVN Commit"/>
	</target>
	
	<target name="svnLog" depends="prepareSVN" description="Generates logs from the repository">
		<echo message="Starting: SVN Log"/>
		
		<exec executable="svn" output="${build.logs.svn}">
			<arg value="log"/>
			<arg value="-v"/>
			<arg value="--xml"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="--password"/>
			<arg value="${svn.password}"/>
			<arg value="-r"/>
			<arg value="{${svn.log.startDate}}:{${svn.log.endDate}}"/>
			<arg value="${basedir}"/>
		</exec>
		
		<!-- TODO Use this version when they get the verbose option working
		<svn username="${svn.username}" password="${svn.password}" javahl="${svn.javahl}" svnkit="${svn.svnkit}">
			<log path="${basedir}" startrevision="{${svn.log.startDate}}" destfile="${build.logs.svn}" asxml="true" recurse="true" verbose="true"/>
		</svn>
		-->
		
		<echo message="Finished: SVN Log at ${build.logs.svn}"/>
	</target>
	
	<target name="svnUpdate" depends="prepareSVN" description="Updates the code from the repository">
		<echo message="Starting: SVN Update"/>
		
		<svn username="${svn.username}" password="${svn.password}" javahl="${svn.javahl}" svnkit="${svn.svnkit}">
			<update dir="${basedir}" recurse="true"/>
		</svn>
		
		<echo message="Finished: SVN Update"/>
	</target>
	
	<target name="template" depends="prepare" description="Uses the templates to update files with dynamic information">
		<echo message="Starting: Template"/>
		
		<!-- Define the filter set for the template -->
		<filterset id="templateFilterset">
			<filtersfile file="${build.dist}/settings/user.properties" />
			<filtersfile file="${build.dist}/settings/project.properties" />
		</filterset>
		
		<!-- Copy the plugin config file -->
		<copy tofile="${basedir}/${project.key}/config/plugin.json.cfm" overwrite="true">
			<fileset file="${build.templates}/config/plugin.json.cfm"/>
			<filterset refid="templateFilterset"/>
		</copy>
		
		<echo message="Finished: Template"/>
	</target>
	
	<target name="testMXUnit" depends="prepare" description="Runs the Unit Tests">
		<echo message="Starting: Unit Tests"/>
		
		<!-- Load ANT tasks -->
		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpath="${basedir}/mxunit/ant/lib/mxunit-ant-java5.jar" />
		
		<mxunittask server="${test.host}" port="${test.port}" outputdir="${build.dist}/unit" defaultrunner="${test.mxunit.defaultrunner}" failureproperty="test.mxunit.failure" verbose="${general.verbose}">
			<directory path="${basedir}/test" componentPath="${test.mxunit.componentpath}" recurse="true" />
		</mxunittask>
		
		<fail if="test.mxunit.failure" message="Unit tests failed" />
		
		<echo message="Finished: Unit Tests"/>
	</target>
	
	<target name="testVarScoper" depends="prepare" description="Runs the varScoper">
		<echo message="Starting: VarScoper Tests"/>
		
		<!-- Save the results as a csv -->
		<get dest="${test.varscoper.resultFile}" src="http://${test.host}:${test.port}${test.varscoper.base}/varScoper.cfm?displayformat=csv&amp;filePath=${test.varscoper.filePath}&amp;recursiveDirectory=${test.varscoper.recurse}"/>
		
		<loadfile srcfile="${test.varscoper.resultFile}" property="test.varscoper.csv">
			<filterchain>
				<headfilter skip="1"/>
				
				<trim/>
			</filterchain>
		</loadfile>
		
		<!-- Remove the csv file -->
		<delete file="${test.varscoper.resultFile}"/>
		
		<!-- Fail the build if there are any violations of the var scoping -->
		<fail message="Var Scope Violation:${line.separator}${test.varscoper.csv}">
			<condition>
				<isset property="test.varscoper.csv"/>
			</condition>
		</fail>
		
		<echo message="Finished: VarScoper Tests"/>
	</target>
</project>